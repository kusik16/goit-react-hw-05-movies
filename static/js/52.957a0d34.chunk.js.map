{"version":3,"file":"static/js/52.957a0d34.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/pages/cast/Cast.module.css?6b46","components/pages/cast/Cast.js","services/MovieService.js","hooks/http.hook.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Cast_item__-YEO9\",\"image\":\"Cast_image__Ly2vd\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport useMovieService from 'services/MovieService';\n\nimport castCSS from './Cast.module.css';\n\nconst Cast = () => {\n\tconst [movieCast, setMovieCast] = useState(null);\n\n\tconst { getMovieCredits } = useMovieService();\n\n\tconst { movieId } = useParams();\n\n\tuseEffect(() => {\n\t\tgetMovieCredits(movieId).then(res => {\n\t\t\tsetMovieCast(res);\n\t\t});\n\t\t// eslint-disable-next-line\n\t}, []);\n\n\t\tconsole.log('render cast');\n\treturn (\n\t\t<ul>\n\t\t\t{movieCast &&\n\t\t\t\tmovieCast.map(cast => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li className={castCSS.item} key={cast.id}>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName={castCSS.image}\n\t\t\t\t\t\t\t\tsrc={`https://image.tmdb.org/t/p/w200/${cast.profile_path}`}\n\t\t\t\t\t\t\t\talt=\"cast_image\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div>{cast.name}</div>\n\t\t\t\t\t\t\t<div>Character: {cast.character}</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t</ul>\n\t);\n};\n\nexport default Cast;\n","import { useHttp } from '../hooks/http.hook';\n\nconst useMovieService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp();\n\n\tconst _apiBase = 'https://api.themoviedb.org/3/';\n\tconst _apiKey = 'api_key=a01a0779b6da55b3cb3231f967e502fc';\n\n\tconst getTrandingToday = async () => {\n\t\tconst res = await request(`${_apiBase}trending/movie/day?${_apiKey}`);\n\t\treturn res.results.map(_transformFilms);\n\t};\n\n\tconst searchFilmByName = async name => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}search/movie?${_apiKey}&query=${name}`\n\t\t);\n\t\treturn res.results.map(_transformFilms);\n\t};\n\n\tconst getMovieDetails = async movieId => {\n\t\tconst res = await request(`${_apiBase}movie/${movieId}?${_apiKey}`);\n\t\treturn res;\n\t};\n\n\tconst getMovieCredits = async movieId => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}movie/${movieId}/credits?${_apiKey}`\n\t\t);\n\t\treturn res.cast.map(_transformCast);\n\t};\n\n\tconst getMovieReviews = async movieId => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}movie/${movieId}/reviews?${_apiKey}`\n\t\t);\n\t\treturn res.results.map(_transformReviews);\n\t};\n\n\tconst _transformFilms = film => {\n\t\treturn {\n\t\t\tid: film.id,\n\t\t\ttitle: film.title,\n\t\t};\n\t};\n\n\tconst _transformCast = cast => {\n\t\treturn {\n\t\t\tid: cast.id,\n\t\t\tprofile_path: cast.profile_path,\n\t\t\tname: cast.name,\n\t\t\tcharacter: cast.character,\n\t\t};\n\t};\n\n\tconst _transformReviews = review => {\n\t\treturn {\n\t\t\tid: review.id,\n\t\t\tauthor: review.author,\n\t\t\tcontent: review.content,\n\t\t};\n\t};\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetTrandingToday,\n\t\tsearchFilmByName,\n\t\tgetMovieDetails,\n\t\tgetMovieCredits,\n\t\tgetMovieReviews,\n\t};\n};\n\nexport default useMovieService;\n","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n\tconst [process, setProcess] = useState('waiting');\n\n\tconst request = useCallback(\n\t\tasync (\n\t\t\turl,\n\t\t\tmethod = 'GET',\n\t\t\tbody = null,\n\t\t\theaders = { 'Content-Type': 'application/json' }\n\t\t) => {\n\t\t\tsetProcess('loading');\n\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url, { method, body, headers });\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Could not fetch ${url}, status: ${response.status}`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\n\t\t\t\treturn data;\n\t\t\t} catch (e) {\n\t\t\t\tsetProcess('error');\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\n\tconst clearError = useCallback(() => {\n\t\tsetProcess('loading');\n\t}, []);\n\n\treturn { request, clearError, process, setProcess };\n};\n"],"names":["useState","movieCast","setMovieCast","getMovieCredits","useMovieService","movieId","useParams","useEffect","then","res","console","log","map","cast","className","castCSS","src","profile_path","alt","name","character","id","process","setProcess","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getTrandingToday","results","_transformFilms","searchFilmByName","getMovieDetails","_transformCast","getMovieReviews","_transformReviews","film","title","review","author","content"],"sourceRoot":""}