{"version":3,"file":"static/js/903.7349d7c0.chunk.js","mappings":"uMA+CA,UA1Ce,WACd,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SAE5BC,GAAqBC,EAAAA,EAAAA,KAArBD,iBAEFE,EAAe,SAAAC,GACpBH,EAAiBG,GAAMC,MAAK,SAAAC,GAAG,OAAIX,EAAeW,EAAnB,GAC/B,EAaD,OAPAC,EAAAA,EAAAA,YAAU,WACLR,GACHI,EAAaJ,EAGd,GAAE,KAGF,iCACC,kBAAOS,SAAU,SAAAC,GAAC,OAbA,SAAAA,GACnBX,EAAmC,KAAnBW,EAAEC,OAAOC,MAAe,CAAEC,MAAOH,EAAEC,OAAOC,OAAU,CAAC,EACrE,CAWuBE,CAAYJ,EAAhB,EAAoBK,KAAK,UAC3C,mBAAQC,QAAS,kBAAMZ,EAAaJ,EAAnB,EAAjB,qBACA,wBACEL,EAAYsB,KAAI,SAAAC,GAChB,OACC,yBACC,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAKE,IAAMC,MAAO,CAAEC,KAAM9B,GAAvC,SACE0B,EAAKK,SAFCL,EAAKE,GAMf,QAIJ,C,uGC8BD,EAzEwB,WACvB,MCDsB,WACtB,OAA8B1B,EAAAA,EAAAA,UAAS,WAAvC,eAAO8B,EAAP,KAAgBC,EAAhB,KAEMC,GAAUC,EAAAA,EAAAA,aAAW,mCAC1B,WACCC,GADD,kGAECC,EAFD,+BAEU,MACTC,EAHD,+BAGQ,KACPC,EAJD,+BAIW,CAAE,eAAgB,oBAE5BN,EAAW,WANZ,kBASyBO,MAAMJ,EAAK,CAAEC,OAAAA,EAAQC,KAAAA,EAAMC,QAAAA,IATpD,WASQE,EATR,QAWgBC,GAXhB,uBAYS,IAAIC,MAAJ,0BACcP,EADd,qBAC8BK,EAASG,SAbhD,yBAiBqBH,EAASI,OAjB9B,eAiBQC,EAjBR,yBAmBSA,GAnBT,wCAqBEb,EAAW,SArBb,+DAD0B,sDA0B1B,IAOD,MAAO,CAAEC,QAAAA,EAASa,YAJCZ,EAAAA,EAAAA,cAAY,WAC9BF,EAAW,UACX,GAAE,IAE2BD,QAAAA,EAASC,WAAAA,EACvC,CDpCqDe,GAA7Cd,EAAR,EAAQA,QAASa,EAAjB,EAAiBA,WAAYf,EAA7B,EAA6BA,QAASC,EAAtC,EAAsCA,WAEhCgB,EAAW,gCACXC,EAAU,2CAEVC,EAAgB,mCAAG,oGACNjB,EAAQ,GAAD,OAAIe,EAAJ,8BAAkCC,IADnC,cAClBnC,EADkB,yBAEjBA,EAAIqC,QAAQ3B,IAAI4B,IAFC,2CAAH,qDAKhB3C,EAAgB,mCAAG,WAAMG,GAAN,uFACNqB,EAAQ,GAAD,OACrBe,EADqB,wBACGC,EADH,kBACoBrC,IAFrB,cAClBE,EADkB,yBAIjBA,EAAIqC,QAAQ3B,IAAI4B,IAJC,2CAAH,sDAOhBC,EAAe,mCAAG,WAAMC,GAAN,uFACLrB,EAAQ,GAAD,OAAIe,EAAJ,iBAAqBM,EAArB,YAAgCL,IADlC,cACjBnC,EADiB,yBAEhBA,GAFgB,2CAAH,sDAKfyC,EAAe,mCAAG,WAAMD,GAAN,uFACLrB,EAAQ,GAAD,OACrBe,EADqB,iBACJM,EADI,oBACeL,IAFjB,cACjBnC,EADiB,yBAIhBA,EAAI0C,KAAKhC,IAAIiC,IAJG,2CAAH,sDAOfC,EAAe,mCAAG,WAAMJ,GAAN,uFACLrB,EAAQ,GAAD,OACrBe,EADqB,iBACJM,EADI,oBACeL,IAFjB,cACjBnC,EADiB,yBAIhBA,EAAIqC,QAAQ3B,IAAImC,IAJA,2CAAH,sDAOfP,EAAkB,SAAAQ,GACvB,MAAO,CACNjC,GAAIiC,EAAKjC,GACTG,MAAO8B,EAAK9B,MAEb,EAEK2B,EAAiB,SAAAD,GACtB,MAAO,CACN7B,GAAI6B,EAAK7B,GACTkC,aAAcL,EAAKK,aACnBjD,KAAM4C,EAAK5C,KACXkD,UAAWN,EAAKM,UAEjB,EAEKH,EAAoB,SAAAI,GACzB,MAAO,CACNpC,GAAIoC,EAAOpC,GACXqC,OAAQD,EAAOC,OACfC,QAASF,EAAOE,QAEjB,EAED,MAAO,CACNnB,WAAAA,EACAf,QAAAA,EACAC,WAAAA,EACAkB,iBAAAA,EACAzC,iBAAAA,EACA4C,gBAAAA,EACAE,gBAAAA,EACAG,gBAAAA,EAED,C","sources":["components/pages/movies/Movies.js","services/MovieService.js","hooks/http.hook.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n\nimport useMovieService from 'services/MovieService';\n\nconst Movies = () => {\n\tconst location = useLocation();\n\tconst [moviesArray, setMoviesArray] = useState([]);\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\tconst searchText = searchParams.get('query');\n\n\tconst { searchFilmByName } = useMovieService();\n\n\tconst onSearchFilm = name => {\n\t\tsearchFilmByName(name).then(res => setMoviesArray(res));\n\t};\n\n\tconst changeQuery = e => {\n\t\tsetSearchParams(e.target.value !== '' ? { query: e.target.value } : {});\n\t};\n\n\tuseEffect(() => {\n\t\tif (searchText) {\n\t\t\tonSearchFilm(searchText);\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<input onChange={e => changeQuery(e)} type=\"text\" />\n\t\t\t<button onClick={() => onSearchFilm(searchText)}>search</button>\n\t\t\t<ul>\n\t\t\t\t{moviesArray.map(item => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t<Link to={`${item.id}`} state={{ from: location }}>\n\t\t\t\t\t\t\t\t{item.title}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</>\n\t);\n};\n\nexport default Movies;\n","import { useHttp } from '../hooks/http.hook';\n\nconst useMovieService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp();\n\n\tconst _apiBase = 'https://api.themoviedb.org/3/';\n\tconst _apiKey = 'api_key=a01a0779b6da55b3cb3231f967e502fc';\n\n\tconst getTrandingToday = async () => {\n\t\tconst res = await request(`${_apiBase}trending/movie/day?${_apiKey}`);\n\t\treturn res.results.map(_transformFilms);\n\t};\n\n\tconst searchFilmByName = async name => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}search/movie?${_apiKey}&query=${name}`\n\t\t);\n\t\treturn res.results.map(_transformFilms);\n\t};\n\n\tconst getMovieDetails = async movieId => {\n\t\tconst res = await request(`${_apiBase}movie/${movieId}?${_apiKey}`);\n\t\treturn res;\n\t};\n\n\tconst getMovieCredits = async movieId => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}movie/${movieId}/credits?${_apiKey}`\n\t\t);\n\t\treturn res.cast.map(_transformCast);\n\t};\n\n\tconst getMovieReviews = async movieId => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}movie/${movieId}/reviews?${_apiKey}`\n\t\t);\n\t\treturn res.results.map(_transformReviews);\n\t};\n\n\tconst _transformFilms = film => {\n\t\treturn {\n\t\t\tid: film.id,\n\t\t\ttitle: film.title,\n\t\t};\n\t};\n\n\tconst _transformCast = cast => {\n\t\treturn {\n\t\t\tid: cast.id,\n\t\t\tprofile_path: cast.profile_path,\n\t\t\tname: cast.name,\n\t\t\tcharacter: cast.character,\n\t\t};\n\t};\n\n\tconst _transformReviews = review => {\n\t\treturn {\n\t\t\tid: review.id,\n\t\t\tauthor: review.author,\n\t\t\tcontent: review.content,\n\t\t};\n\t};\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetTrandingToday,\n\t\tsearchFilmByName,\n\t\tgetMovieDetails,\n\t\tgetMovieCredits,\n\t\tgetMovieReviews,\n\t};\n};\n\nexport default useMovieService;\n","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n\tconst [process, setProcess] = useState('waiting');\n\n\tconst request = useCallback(\n\t\tasync (\n\t\t\turl,\n\t\t\tmethod = 'GET',\n\t\t\tbody = null,\n\t\t\theaders = { 'Content-Type': 'application/json' }\n\t\t) => {\n\t\t\tsetProcess('loading');\n\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url, { method, body, headers });\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Could not fetch ${url}, status: ${response.status}`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\n\t\t\t\treturn data;\n\t\t\t} catch (e) {\n\t\t\t\tsetProcess('error');\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\n\tconst clearError = useCallback(() => {\n\t\tsetProcess('loading');\n\t}, []);\n\n\treturn { request, clearError, process, setProcess };\n};\n"],"names":["location","useLocation","useState","moviesArray","setMoviesArray","useSearchParams","searchParams","setSearchParams","searchText","get","searchFilmByName","useMovieService","onSearchFilm","name","then","res","useEffect","onChange","e","target","value","query","changeQuery","type","onClick","map","item","to","id","state","from","title","process","setProcess","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getTrandingToday","results","_transformFilms","getMovieDetails","movieId","getMovieCredits","cast","_transformCast","getMovieReviews","_transformReviews","film","profile_path","character","review","author","content"],"sourceRoot":""}